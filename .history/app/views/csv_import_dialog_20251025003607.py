#!/usr/bin/env python3
"""
CSV Import Dialog for BJJ CRM System
Dialog for importing student data from CSV files
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import os
import sys

# Add project root to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from app.services.csv_import_service import CSVImportService


class CSVImportDialog:
    """Dialog for importing student data from CSV files"""
    
    def __init__(self, parent, refresh_callback=None):
        self.parent = parent
        self.refresh_callback = refresh_callback
        self.import_service = CSVImportService()
        self.selected_file = None
        
        # Create dialog window
        self.dialog = tk.Toplevel(parent)
        self.dialog.title("üì• –ò–º–ø–æ—Ä—Ç —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑ CSV")
        self.dialog.geometry("700x600")
        self.dialog.resizable(True, True)
        
        # Make dialog modal
        self.dialog.transient(parent)
        self.dialog.grab_set()
        
        # Center dialog
        self.dialog.update_idletasks()
        x = (self.dialog.winfo_screenwidth() // 2) - (600 // 2)
        y = (self.dialog.winfo_screenheight() // 2) - (500 // 2)
        self.dialog.geometry(f"600x500+{x}+{y}")
        
        self.create_widgets()
    
    def create_widgets(self):
        """Create dialog widgets"""
        # Main frame
        main_frame = ttk.Frame(self.dialog, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Title
        title_label = ttk.Label(main_frame, text="üì• –ò–º–ø–æ—Ä—Ç —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑ CSV", 
                               font=("Arial", 16, "bold"))
        title_label.pack(pady=(0, 20))
        
        # File selection frame
        file_frame = ttk.LabelFrame(main_frame, text="üìÑ –í—ã–±–æ—Ä CSV —Ñ–∞–π–ª–∞", padding="10")
        file_frame.pack(fill=tk.X, pady=(0, 20))
        
        file_select_frame = ttk.Frame(file_frame)
        file_select_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.file_path_var = tk.StringVar()
        self.file_entry = ttk.Entry(file_select_frame, textvariable=self.file_path_var, width=60)
        self.file_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))
        
        ttk.Button(file_select_frame, text="üìÇ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª", 
                  command=self.select_csv_file).pack(side=tk.RIGHT)
        
        # Options frame
        options_frame = ttk.LabelFrame(main_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∞", padding="10")
        options_frame.pack(fill=tk.X, pady=(0, 20))
        
        self.skip_duplicates_var = tk.BooleanVar(value=True)
        skip_duplicates_check = ttk.Checkbutton(
            options_frame, 
            text="–ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã (–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞)", 
            variable=self.skip_duplicates_var
        )
        skip_duplicates_check.pack(anchor=tk.W, pady=(0, 10))
        
        # Buttons frame
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(fill=tk.X, pady=(0, 20))
        
        validate_button = ttk.Button(buttons_frame, text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç", 
                                   command=self.validate_file)
        validate_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.import_button = ttk.Button(buttons_frame, text="üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                                       command=self.import_data, state=tk.DISABLED)
        self.import_button.pack(side=tk.LEFT, padx=(0, 10))
        
        template_button = ttk.Button(buttons_frame, text="üìã –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω", 
                                   command=self.download_template)
        template_button.pack(side=tk.LEFT)
        
        # Results frame
        results_frame = ttk.LabelFrame(main_frame, text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", padding="10")
        results_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 20))
        
        # Results text widget
        self.results_text = tk.Text(results_frame, height=10, wrap=tk.WORD)
        results_scrollbar = ttk.Scrollbar(results_frame, orient=tk.VERTICAL, command=self.results_text.yview)
        self.results_text.configure(yscrollcommand=results_scrollbar.set)
        
        self.results_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        results_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Help frame
        help_frame = ttk.LabelFrame(main_frame, text="‚ùì –ü–æ–º–æ—â—å", padding="10")
        help_frame.pack(fill=tk.X, pady=(0, 20))
        
        help_text = """
–§–æ—Ä–º–∞—Ç CSV —Ñ–∞–π–ª–∞:
‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: first_name, last_name, phone
‚Ä¢ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: telegram_id, email, current_belt, notes
‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: –∑–∞–ø—è—Ç–∞—è (,)
‚Ä¢ –ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-8
‚Ä¢ –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏

–ü—Ä–∏–º–µ—Ä:
first_name,last_name,phone,telegram_id,email,current_belt,notes
–ò–≤–∞–Ω,–ò–≤–∞–Ω–æ–≤,+7-999-123-45-67,@ivanov,ivan@example.com,White,–ù–∞—á–∏–Ω–∞—é—â–∏–π —É—á–µ–Ω–∏–∫
        """
        
        help_label = ttk.Label(help_frame, text=help_text.strip(), justify=tk.LEFT)
        help_label.pack(anchor=tk.W)
        
        # Close button
        close_button = ttk.Button(main_frame, text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", command=self.dialog.destroy)
        close_button.pack(pady=(20, 0))
    
    def select_csv_file(self):
        """Select CSV file for import"""
        try:
            file_path = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —É—á–µ–Ω–∏–∫–æ–≤",
                filetypes=[
                    ("CSV files", "*.csv"),
                    ("All files", "*.*")
                ]
            )
            if file_path:
                self.file_path_var.set(file_path)
                self.selected_file = file_path
                
                # Show file selection in results
                self.results_text.delete(1.0, tk.END)
                self.results_text.insert(tk.END, f"üìÅ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {file_path}\n")
                self.results_text.insert(tk.END, f"üìä –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç' –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏\n")
        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞: {e}")
    
    def validate_file(self):
        """Validate selected CSV file"""
        file_path = self.file_path_var.get().strip()
        
        if not file_path:
            messagebox.showwarning("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª")
            return
        
        if not os.path.exists(file_path):
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            # Show progress
            self.dialog.config(cursor="wait")
            self.dialog.update()
            
            validation = self.import_service.validate_csv_format(file_path)
            
            if validation['valid']:
                message = f"‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –∏–º–ø–æ—Ä—Ç—É!\n\n"
                message += f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {', '.join(validation['headers'])}\n"
                message += f"–°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {validation['row_count']}\n"
                message += f"–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: '{validation['delimiter']}'"
                
                messagebox.showinfo("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞", message)
                
                # Show validation results in text widget
                self.results_text.delete(1.0, tk.END)
                self.results_text.insert(tk.END, f"‚úÖ –§–∞–π–ª –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é\n")
                self.results_text.insert(tk.END, f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {', '.join(validation['headers'])}\n")
                self.results_text.insert(tk.END, f"–°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {validation['row_count']}\n")
                self.results_text.insert(tk.END, f"–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: '{validation['delimiter']}'\n")
                
                # Enable import button after successful validation
                self.import_button.config(state=tk.NORMAL)
            else:
                messagebox.showerror("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", validation['error'])
                
                # Show error in text widget
                self.results_text.delete(1.0, tk.END)
                self.results_text.insert(tk.END, f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validation['error']}\n")
                
                # Disable import button on validation error
                self.import_button.config(state=tk.DISABLED)
        
        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞:\n{str(e)}")
            
            # Disable import button on error
            self.import_button.config(state=tk.DISABLED)
        
        finally:
            self.dialog.config(cursor="")
    
    def import_data(self):
        """Import data from CSV file"""
        file_path = self.file_path_var.get().strip()
        if not file_path:
            messagebox.showwarning("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª")
            return
        
        if not os.path.exists(file_path):
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            # Show progress
            self.dialog.config(cursor="wait")
            self.dialog.update()
            
            skip_duplicates = self.skip_duplicates_var.get()
            result = self.import_service.import_students_from_csv(file_path, skip_duplicates)
            
            # Show results in text widget
            self.results_text.delete(1.0, tk.END)
            
            if result['success']:
                self.results_text.insert(tk.END, f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n")
                self.results_text.insert(tk.END, f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —É—á–µ–Ω–∏–∫–æ–≤: {result['imported_count']}\n")
                self.results_text.insert(tk.END, f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {result['skipped_count']}\n")
                self.results_text.insert(tk.END, f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: {result['total_rows']}\n")
                
                if result['errors']:
                    self.results_text.insert(tk.END, f"\n‚ö†Ô∏è –û—à–∏–±–∫–∏ ({len(result['errors'])}):\n")
                    for error in result['errors'][:10]:  # Show first 10 errors
                        self.results_text.insert(tk.END, f"‚Ä¢ {error}\n")
                    if len(result['errors']) > 10:
                        self.results_text.insert(tk.END, f"... –∏ –µ—â–µ {len(result['errors']) - 10} –æ—à–∏–±–æ–∫\n")
                
                # Show success message
                message = f"–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                message += f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {result['imported_count']}\n"
                message += f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {result['skipped_count']}\n"
                message += f"–û—à–∏–±–æ–∫: {len(result['errors'])}"
                
                messagebox.showinfo("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω", message)
                
                # Refresh parent if callback provided
                if self.refresh_callback:
                    self.refresh_callback()
                
                # Disable import button after successful import
                self.import_button.config(state=tk.DISABLED)
            else:
                self.results_text.insert(tk.END, f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {result['error']}\n")
                messagebox.showerror("‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞", result['error'])
        
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}"
            self.results_text.delete(1.0, tk.END)
            self.results_text.insert(tk.END, error_msg)
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", error_msg)
        
        finally:
            self.dialog.config(cursor="")
    
    def download_template(self):
        """Download CSV template"""
        file_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω CSV",
            defaultextension=".csv",
            filetypes=[
                ("CSV files", "*.csv"),
                ("All files", "*.*")
            ]
        )
        
        if file_path:
            try:
                if self.import_service.export_template_to_file(file_path):
                    messagebox.showinfo("‚úÖ –£—Å–ø–µ—Ö", f"–®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:\n{file_path}")
                else:
                    messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω")
            except Exception as e:
                messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:\n{str(e)}")
    
    def __del__(self):
        """Cleanup when dialog is destroyed"""
        if hasattr(self, 'import_service'):
            self.import_service.close()


def show_csv_import_dialog(parent, refresh_callback=None):
    """Show CSV import dialog"""
    CSVImportDialog(parent, refresh_callback)
