import requests
import os
from typing import List, Optional
from datetime import datetime, timedelta
from app.models import Student, Training, Attendance
from database.connection import SessionLocal

class TelegramNotificationService:
    """Service for sending notifications via Telegram"""
    
    def __init__(self):
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.chat_id = os.getenv("TELEGRAM_CHAT_ID")
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
    
    def send_message(self, message: str, chat_id: str = None) -> bool:
        """Send message to Telegram chat"""
        if not self.bot_token:
            print("Telegram bot token not configured")
            return False
        
        target_chat_id = chat_id or self.chat_id
        if not target_chat_id:
            print("Telegram chat ID not configured")
            return False
        
        url = f"{self.base_url}/sendMessage"
        data = {
            "chat_id": target_chat_id,
            "text": message,
            "parse_mode": "HTML"
        }
        
        try:
            response = requests.post(url, data=data)
            response.raise_for_status()
            return True
        except requests.RequestException as e:
            print(f"Failed to send Telegram message: {e}")
            return False
    
    def send_training_reminder(self, training: Training, students: List[Student]) -> bool:
        """Send training reminder to students"""
        training_date = training.date.strftime("%d.%m.%Y %H:%M")
        message = f"üèÜ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ</b>\n\n"
        message += f"üìÖ –î–∞—Ç–∞: {training_date}\n"
        message += f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {training.trainer.first_name} {training.trainer.last_name}\n\n"
        message += f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!"
        
        success_count = 0
        for student in students:
            if student.telegram_id:
                if self.send_message(message, student.telegram_id):
                    success_count += 1
        
        return success_count > 0
    
    def send_missed_classes_notification(self, student: Student, missed_count: int) -> bool:
        """Send notification about missed classes"""
        message = f"üëã –ü—Ä–∏–≤–µ—Ç, {student.first_name}!\n\n"
        message += f"–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ {missed_count} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥.\n"
        message += f"–ù–∞–¥–µ–µ–º—Å—è —É–≤–∏–¥–µ—Ç—å –≤–∞—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ! üí™\n\n"
        message += f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –ü–Ω, –°—Ä, –ü—Ç –≤ 20:30"
        
        return self.send_message(message, student.telegram_id)
    
    def send_belt_exam_notification(self, student: Student, belt_color: str, exam_date: datetime) -> bool:
        """Send belt exam notification"""
        exam_date_str = exam_date.strftime("%d.%m.%Y %H:%M")
        message = f"ü•ã <b>–≠–∫–∑–∞–º–µ–Ω –Ω–∞ –ø–æ—è—Å</b>\n\n"
        message += f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {student.first_name} {student.last_name}\n"
        message += f"üéØ –ü–æ—è—Å: {belt_color}\n"
        message += f"üìÖ –î–∞—Ç–∞: {exam_date_str}\n\n"
        message += f"–£–¥–∞—á–∏ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ! üí™"
        
        return self.send_message(message, student.telegram_id)
    
    def send_payment_reminder(self, student: Student, subscription_type: str) -> bool:
        """Send payment reminder"""
        message = f"üí∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ</b>\n\n"
        message += f"üë§ {student.first_name} {student.last_name}\n"
        message += f"üìã –¢–∏–ø: {subscription_type}\n"
        message += f"üí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–µ—Å–∏—Ç–µ –æ–ø–ª–∞—Ç—É –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞"
        
        return self.send_message(message, student.telegram_id)

class NotificationManager:
    """Manager for handling all notifications"""
    
    def __init__(self):
        self.telegram_service = TelegramNotificationService()
        self.db = SessionLocal()
    
    def check_missed_classes(self, threshold: int = 2):
        """Check for students who missed more than threshold classes"""
        # Get students who missed more than threshold classes in last 30 days
        cutoff_date = datetime.utcnow() - timedelta(days=30)
        
        students_with_missed = self.db.query(Student).join(Attendance).join(Training).filter(
            Training.date >= cutoff_date,
            Attendance.status == "Absent"
        ).all()
        
        for student in students_with_missed:
            missed_count = self.db.query(Attendance).join(Training).filter(
                Attendance.student_id == student.id,
                Attendance.status == "Absent",
                Training.date >= cutoff_date
            ).count()
            
            if missed_count >= threshold:
                self.telegram_service.send_missed_classes_notification(student, missed_count)
    
    def send_training_reminders(self, hours_before: int = 2):
        """Send training reminders"""
        reminder_time = datetime.utcnow() + timedelta(hours=hours_before)
        
        # Get upcoming trainings
        upcoming_trainings = self.db.query(Training).filter(
            Training.date >= datetime.utcnow(),
            Training.date <= reminder_time
        ).all()
        
        for training in upcoming_trainings:
            # Get all active students
            students = self.db.query(Student).filter(Student.is_active == True).all()
            self.telegram_service.send_training_reminder(training, students)
    
    def send_payment_reminders(self):
        """Send payment reminders for expiring subscriptions"""
        # Get subscriptions expiring in next 7 days
        cutoff_date = datetime.utcnow() + timedelta(days=7)
        
        expiring_subscriptions = self.db.query(Subscription).filter(
            Subscription.is_active == True,
            Subscription.end_date <= cutoff_date,
            Subscription.end_date >= datetime.utcnow()
        ).all()
        
        for subscription in expiring_subscriptions:
            student = subscription.student
            self.telegram_service.send_payment_reminder(student, subscription.subscription_type)
    
    def cleanup_expired_subscriptions(self):
        """Deactivate expired subscriptions"""
        expired_subscriptions = self.db.query(Subscription).filter(
            Subscription.is_active == True,
            Subscription.end_date < datetime.utcnow()
        ).all()
        
        for subscription in expired_subscriptions:
            subscription.is_active = False
        
        self.db.commit()
        return len(expired_subscriptions)
