#!/usr/bin/env python3
"""
Backup Management Dialog for BJJ CRM System
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from datetime import datetime
import os
import sys

# Add project root to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from app.services.backup_service import BackupService


class BackupDialog:
    """Dialog for managing backups"""
    
    def __init__(self, parent):
        self.parent = parent
        self.backup_service = BackupService()
        self.selected_backup = None
        
        # Create dialog window
        self.dialog = tk.Toplevel(parent)
        self.dialog.title("üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏")
        self.dialog.geometry("800x600")
        self.dialog.resizable(True, True)
        
        # Make dialog modal
        self.dialog.transient(parent)
        self.dialog.grab_set()
        
        # Center dialog
        self.dialog.update_idletasks()
        x = (self.dialog.winfo_screenwidth() // 2) - (800 // 2)
        y = (self.dialog.winfo_screenheight() // 2) - (600 // 2)
        self.dialog.geometry(f"800x600+{x}+{y}")
        
        self.create_widgets()
        self.refresh_backup_list()
    
    def create_widgets(self):
        """Create dialog widgets"""
        # Main frame
        main_frame = ttk.Frame(self.dialog, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Title
        title_label = ttk.Label(main_frame, text="üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏", 
                               font=("Arial", 16, "bold"))
        title_label.pack(pady=(0, 20))
        
        # Create backup section
        create_frame = ttk.LabelFrame(main_frame, text="üì¶ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", padding="10")
        create_frame.pack(fill=tk.X, pady=(0, 20))
        
        # Include files checkbox
        self.include_files_var = tk.BooleanVar(value=True)
        include_files_check = ttk.Checkbutton(
            create_frame, 
            text="–í–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", 
            variable=self.include_files_var
        )
        include_files_check.pack(anchor=tk.W, pady=(0, 10))
        
        # Create backup button
        create_button = ttk.Button(
            create_frame, 
            text="üîÑ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", 
            command=self.create_backup
        )
        create_button.pack(anchor=tk.W)
        
        # Backup list section
        list_frame = ttk.LabelFrame(main_frame, text="üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏", padding="10")
        list_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 20))
        
        # Backup list treeview
        columns = ("timestamp", "size", "files", "type", "version")
        self.backup_tree = ttk.Treeview(list_frame, columns=columns, show="headings", height=8)
        
        # Configure columns
        self.backup_tree.heading("timestamp", text="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è")
        self.backup_tree.heading("size", text="–†–∞–∑–º–µ—Ä")
        self.backup_tree.heading("files", text="–§–∞–π–ª—ã")
        self.backup_tree.heading("type", text="–¢–∏–ø")
        self.backup_tree.heading("version", text="–í–µ—Ä—Å–∏—è")
        
        self.backup_tree.column("timestamp", width=180)
        self.backup_tree.column("size", width=100)
        self.backup_tree.column("files", width=80)
        self.backup_tree.column("type", width=100)
        self.backup_tree.column("version", width=80)
        
        # Scrollbar for treeview
        scrollbar = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.backup_tree.yview)
        self.backup_tree.configure(yscrollcommand=scrollbar.set)
        
        # Pack treeview and scrollbar
        self.backup_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Bind selection event
        self.backup_tree.bind("<<TreeviewSelect>>", self.on_backup_select)
        
        # Action buttons frame
        actions_frame = ttk.Frame(list_frame)
        actions_frame.pack(fill=tk.X, pady=(10, 0))
        
        # Action buttons
        self.restore_button = ttk.Button(
            actions_frame, 
            text="üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
            command=self.restore_backup,
            state=tk.DISABLED
        )
        self.restore_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.delete_button = ttk.Button(
            actions_frame, 
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
            command=self.delete_backup,
            state=tk.DISABLED
        )
        self.delete_button.pack(side=tk.LEFT, padx=(0, 10))
        
        refresh_button = ttk.Button(
            actions_frame, 
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", 
            command=self.refresh_backup_list
        )
        refresh_button.pack(side=tk.LEFT, padx=(0, 10))
        
        cleanup_button = ttk.Button(
            actions_frame, 
            text="üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ", 
            command=self.cleanup_old_backups
        )
        cleanup_button.pack(side=tk.LEFT)
        
        # Close button
        close_button = ttk.Button(main_frame, text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", command=self.dialog.destroy)
        close_button.pack(pady=(20, 0))
    
    def create_backup(self):
        """Create a new backup"""
        try:
            include_files = self.include_files_var.get()
            
            # Show progress
            self.dialog.config(cursor="wait")
            self.dialog.update()
            
            # Create backup
            backup_info = self.backup_service.create_backup(include_files=include_files)
            
            # Show success message
            messagebox.showinfo(
                "‚úÖ –£—Å–ø–µ—Ö", 
                f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                f"–í—Ä–µ–º—è: {backup_info['timestamp']}\n"
                f"–§–∞–π–ª—ã –≤–∫–ª—é—á–µ–Ω—ã: {'–î–∞' if include_files else '–ù–µ—Ç'}"
            )
            
            # Refresh list
            self.refresh_backup_list()
            
        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:\n{str(e)}")
        
        finally:
            self.dialog.config(cursor="")
    
    def refresh_backup_list(self):
        """Refresh the backup list"""
        try:
            # Clear existing items
            for item in self.backup_tree.get_children():
                self.backup_tree.delete(item)
            
            # Get backups
            backups = self.backup_service.list_backups()
            
            # Add backups to treeview
            for backup in backups:
                timestamp = backup['timestamp']
                formatted_time = datetime.strptime(timestamp, "%Y%m%d_%H%M%S").strftime("%d.%m.%Y %H:%M:%S")
                
                size = self.backup_service.get_backup_size(backup)
                formatted_size = self.backup_service.format_size(size)
                
                files_included = "–î–∞" if backup.get('files_file') else "–ù–µ—Ç"
                backup_type = backup.get('backup_type', 'manual')
                app_version = backup.get('app_version', '1.0.0')
                
                self.backup_tree.insert("", tk.END, values=(formatted_time, formatted_size, files_included, backup_type, app_version), tags=(backup,))
            
            # Update status
            status_text = f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {len(backups)}"
            if hasattr(self, 'status_label'):
                self.status_label.config(text=status_text)
            
        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:\n{str(e)}")
    
    def on_backup_select(self, event):
        """Handle backup selection"""
        selection = self.backup_tree.selection()
        if selection:
            item = self.backup_tree.item(selection[0])
            self.selected_backup = item['tags'][0] if item['tags'] else None
            
            # Enable buttons
            self.restore_button.config(state=tk.NORMAL)
            self.delete_button.config(state=tk.NORMAL)
        else:
            self.selected_backup = None
            self.restore_button.config(state=tk.DISABLED)
            self.delete_button.config(state=tk.DISABLED)
    
    def restore_backup(self):
        """Restore selected backup"""
        if not self.selected_backup:
            messagebox.showwarning("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            return
        
        # Confirm restore
        result = messagebox.askyesno(
            "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç—É —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é?\n\n"
            "–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã!"
        )
        
        if not result:
            return
        
        try:
            # Ask about files restore
            restore_files = False
            if self.selected_backup.get('files_file'):
                restore_files = messagebox.askyesno(
                    "üìÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤", 
                    "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–∫–∂–µ —Ñ–∞–π–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?"
                )
            
            # Show progress
            self.dialog.config(cursor="wait")
            self.dialog.update()
            
            # Restore backup
            self.backup_service.restore_backup(self.selected_backup, restore_files=restore_files)
            
            # Show success message
            messagebox.showinfo(
                "‚úÖ –£—Å–ø–µ—Ö", 
                "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π."
            )
            
        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:\n{str(e)}")
        
        finally:
            self.dialog.config(cursor="")
    
    def delete_backup(self):
        """Delete selected backup"""
        if not self.selected_backup:
            messagebox.showwarning("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        # Confirm deletion
        result = messagebox.askyesno(
            "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é?\n\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
        )
        
        if not result:
            return
        
        try:
            # Delete backup
            self.backup_service.delete_backup(self.selected_backup)
            
            # Show success message
            messagebox.showinfo("‚úÖ –£—Å–ø–µ—Ö", "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # Refresh list
            self.refresh_backup_list()
            
        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:\n{str(e)}")
    
    def cleanup_old_backups(self):
        """Clean up old backups"""
        result = messagebox.askyesno(
            "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–ø–∏–π", 
            "–£–¥–∞–ª–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π?\n\n"
            "–≠—Ç–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ."
        )
        
        if not result:
            return
        
        try:
            # Cleanup old backups
            deleted_count = self.backup_service.cleanup_old_backups(keep_days=7)
            
            # Show result
            messagebox.showinfo(
                "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 
                f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {deleted_count}"
            )
            
            # Refresh list
            self.refresh_backup_list()
            
        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:\n{str(e)}")


def show_backup_dialog(parent):
    """Show backup management dialog"""
    BackupDialog(parent)
