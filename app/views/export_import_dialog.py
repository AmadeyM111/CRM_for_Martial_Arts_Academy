#!/usr/bin/env python3
"""
Export/Import Dialog for BJJ CRM System
Handles CSV export and Google Drive import
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from datetime import datetime
import os
import sys
import webbrowser

# Add project root to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from app.services.csv_export_service import CSVExportService
from app.services.google_drive_service import GoogleDriveService


class ExportImportDialog:
    """Dialog for managing data export and import"""
    
    def __init__(self, parent):
        self.parent = parent
        self.csv_service = CSVExportService()
        self.google_service = GoogleDriveService()
        
        # Create dialog window
        self.dialog = tk.Toplevel(parent)
        self.dialog.title("üìä –≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        self.dialog.geometry("900x700")
        self.dialog.resizable(True, True)
        
        # Make dialog modal
        self.dialog.transient(parent)
        self.dialog.grab_set()
        
        # Center dialog
        self.dialog.update_idletasks()
        x = (self.dialog.winfo_screenwidth() // 2) - (900 // 2)
        y = (self.dialog.winfo_screenheight() // 2) - (700 // 2)
        self.dialog.geometry(f"900x700+{x}+{y}")
        
        self.create_widgets()
        self.refresh_export_list()
    
    def create_widgets(self):
        """Create dialog widgets"""
        # Main frame
        main_frame = ttk.Frame(self.dialog, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Title
        title_label = ttk.Label(main_frame, text="üìä –≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", 
                               font=("Arial", 16, "bold"))
        title_label.pack(pady=(0, 20))
        
        # Create notebook for tabs
        notebook = ttk.Notebook(main_frame)
        notebook.pack(fill=tk.BOTH, expand=True)
        
        # Export tab
        export_frame = ttk.Frame(notebook, padding="10")
        notebook.add(export_frame, text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV")
        self.create_export_tab(export_frame)
        
        # Import tab
        import_frame = ttk.Frame(notebook, padding="10")
        notebook.add(import_frame, text="üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        self.create_import_tab(import_frame)
        
        # Close button
        close_button = ttk.Button(main_frame, text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", command=self.dialog.destroy)
        close_button.pack(pady=(20, 0))
    
    def create_export_tab(self, parent):
        """Create export tab"""
        # Export options frame
        options_frame = ttk.LabelFrame(parent, text="üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", padding="10")
        options_frame.pack(fill=tk.X, pady=(0, 20))
        
        # Export type selection
        self.export_type_var = tk.StringVar(value="all")
        
        ttk.Radiobutton(options_frame, text="üìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ", variable=self.export_type_var, 
                       value="all").pack(anchor=tk.W, pady=2)
        ttk.Radiobutton(options_frame, text="üë• –¢–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–∏", variable=self.export_type_var, 
                       value="students").pack(anchor=tk.W, pady=2)
        ttk.Radiobutton(options_frame, text="ü•ã –¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", variable=self.export_type_var, 
                       value="trainings").pack(anchor=tk.W, pady=2)
        ttk.Radiobutton(options_frame, text="üìù –¢–æ–ª—å–∫–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å", variable=self.export_type_var, 
                       value="attendance").pack(anchor=tk.W, pady=2)
        ttk.Radiobutton(options_frame, text="üí∞ –¢–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂–∏", variable=self.export_type_var, 
                       value="payments").pack(anchor=tk.W, pady=2)
        ttk.Radiobutton(options_frame, text="üìà –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç", variable=self.export_type_var, 
                       value="summary").pack(anchor=tk.W, pady=2)
        
        # Export button
        export_button = ttk.Button(options_frame, text="üöÄ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                                 command=self.export_data)
        export_button.pack(pady=(10, 0))
        
        # Export list frame
        list_frame = ttk.LabelFrame(parent, text="üìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", padding="10")
        list_frame.pack(fill=tk.BOTH, expand=True)
        
        # Export list treeview
        columns = ("filename", "size", "created", "modified")
        self.export_tree = ttk.Treeview(list_frame, columns=columns, show="headings", height=8)
        
        # Configure columns
        self.export_tree.heading("filename", text="–ò–º—è —Ñ–∞–π–ª–∞")
        self.export_tree.heading("size", text="–†–∞–∑–º–µ—Ä")
        self.export_tree.heading("created", text="–°–æ–∑–¥–∞–Ω")
        self.export_tree.heading("modified", text="–ò–∑–º–µ–Ω–µ–Ω")
        
        self.export_tree.column("filename", width=300)
        self.export_tree.column("size", width=100)
        self.export_tree.column("created", width=150)
        self.export_tree.column("modified", width=150)
        
        # Scrollbar for treeview
        scrollbar = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.export_tree.yview)
        self.export_tree.configure(yscrollcommand=scrollbar.set)
        
        # Pack treeview and scrollbar
        self.export_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Export actions frame
        actions_frame = ttk.Frame(list_frame)
        actions_frame.pack(fill=tk.X, pady=(10, 0))
        
        # Action buttons
        open_button = ttk.Button(actions_frame, text="üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É", 
                                command=self.open_export_folder)
        open_button.pack(side=tk.LEFT, padx=(0, 10))
        
        refresh_button = ttk.Button(actions_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                                  command=self.refresh_export_list)
        refresh_button.pack(side=tk.LEFT, padx=(0, 10))
        
        delete_button = ttk.Button(actions_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π", 
                                 command=self.delete_export_file)
        delete_button.pack(side=tk.LEFT)
    
    def create_import_tab(self, parent):
        """Create import tab"""
        # Import method selection
        method_frame = ttk.LabelFrame(parent, text="üìÅ –°–ø–æ—Å–æ–± –∏–º–ø–æ—Ä—Ç–∞", padding="10")
        method_frame.pack(fill=tk.X, pady=(0, 20))
        
        self.import_method_var = tk.StringVar(value="file")
        
        ttk.Radiobutton(method_frame, text="üìÑ –õ–æ–∫–∞–ª—å–Ω—ã–π CSV —Ñ–∞–π–ª", 
                       variable=self.import_method_var, value="file",
                       command=self.toggle_import_method).pack(anchor=tk.W, pady=2)
        ttk.Radiobutton(method_frame, text="üåê Google Sheets URL", 
                       variable=self.import_method_var, value="url",
                       command=self.toggle_import_method).pack(anchor=tk.W, pady=2)
        
        # File selection frame
        self.file_frame = ttk.LabelFrame(parent, text="üìÑ –í—ã–±–æ—Ä CSV —Ñ–∞–π–ª–∞", padding="10")
        self.file_frame.pack(fill=tk.X, pady=(0, 20))
        
        file_select_frame = ttk.Frame(self.file_frame)
        file_select_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.file_path_var = tk.StringVar()
        self.file_entry = ttk.Entry(file_select_frame, textvariable=self.file_path_var, width=60)
        self.file_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))
        
        ttk.Button(file_select_frame, text="üìÇ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª", 
                  command=self.select_csv_file).pack(side=tk.RIGHT)
        
        # Google Sheets URL frame
        self.url_frame = ttk.LabelFrame(parent, text="üîó URL Google Sheets", padding="10")
        
        # URL entry
        ttk.Label(self.url_frame, text="URL CSV —Ñ–∞–π–ª–∞:").pack(anchor=tk.W)
        self.url_entry = ttk.Entry(self.url_frame, width=80)
        self.url_entry.pack(fill=tk.X, pady=(5, 10))
        
        # Data type selection
        data_type_frame = ttk.LabelFrame(parent, text="üìã –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö", padding="10")
        data_type_frame.pack(fill=tk.X, pady=(0, 20))
        
        self.import_type_var = tk.StringVar(value="students")
        
        type_frame = ttk.Frame(data_type_frame)
        type_frame.pack(fill=tk.X, pady=(5, 10))
        
        ttk.Radiobutton(type_frame, text="üë• –£—á–µ–Ω–∏–∫–∏", variable=self.import_type_var, 
                       value="students").pack(side=tk.LEFT, padx=(0, 20))
        ttk.Radiobutton(type_frame, text="ü•ã –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", variable=self.import_type_var, 
                       value="trainings").pack(side=tk.LEFT, padx=(0, 20))
        ttk.Radiobutton(type_frame, text="üí∞ –ü–ª–∞—Ç–µ–∂–∏", variable=self.import_type_var, 
                       value="payments").pack(side=tk.LEFT)
        
        # Import buttons
        buttons_frame = ttk.Frame(parent)
        buttons_frame.pack(fill=tk.X, pady=(0, 20))
        
        validate_button = ttk.Button(buttons_frame, text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç", 
                                   command=self.validate_import)
        validate_button.pack(side=tk.LEFT, padx=(0, 10))
        
        import_button = ttk.Button(buttons_frame, text="üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                                 command=self.import_data)
        import_button.pack(side=tk.LEFT)
        
        # Help frame
        help_frame = ttk.LabelFrame(parent, text="‚ùì –ü–æ–º–æ—â—å", padding="10")
        help_frame.pack(fill=tk.X, pady=(0, 20))
        
        help_text = """
–î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets:

1. –û—Ç–∫—Ä–æ–π—Ç–µ Google Sheets —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL –¥–æ–∫—É–º–µ–Ω—Ç–∞
3. –í—Å—Ç–∞–≤—å—Ç–µ URL –≤ –ø–æ–ª–µ –≤—ã—à–µ
4. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
5. –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç"
6. –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –Ω–∞–∂–º–∏—Ç–µ "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"

–§–æ—Ä–º–∞—Ç CSV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ.
        """
        
        help_label = ttk.Label(help_frame, text=help_text.strip(), justify=tk.LEFT)
        help_label.pack(anchor=tk.W)
        
        # Example URLs frame
        example_frame = ttk.LabelFrame(parent, text="üìù –ü—Ä–∏–º–µ—Ä—ã URL", padding="10")
        example_frame.pack(fill=tk.X)
        
        example_text = """
–ü—Ä–∏–º–µ—Ä—ã URL –¥–ª—è Google Sheets:
‚Ä¢ https://docs.google.com/spreadsheets/d/1ABC123DEF456GHI789JKL/edit#gid=0
‚Ä¢ https://docs.google.com/spreadsheets/d/1ABC123DEF456GHI789JKL/export?format=csv&gid=0
        """
        
        example_label = ttk.Label(example_frame, text=example_text.strip(), justify=tk.LEFT)
        example_label.pack(anchor=tk.W)
    
    def export_data(self):
        """Export data to CSV"""
        try:
            export_type = self.export_type_var.get()
            
            # Show progress
            self.dialog.config(cursor="wait")
            self.dialog.update()
            
            if export_type == "all":
                exports = self.csv_service.export_all_data()
                messagebox.showinfo(
                    "‚úÖ –£—Å–ø–µ—Ö", 
                    f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
                    f"–°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(exports)}\n"
                    f"–ü–∞–ø–∫–∞: {self.csv_service.export_dir}"
                )
            elif export_type == "students":
                filepath = self.csv_service.export_students()
                messagebox.showinfo("‚úÖ –£—Å–ø–µ—Ö", f"–£—á–µ–Ω–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:\n{filepath}")
            elif export_type == "trainings":
                filepath = self.csv_service.export_trainings()
                messagebox.showinfo("‚úÖ –£—Å–ø–µ—Ö", f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:\n{filepath}")
            elif export_type == "attendance":
                filepath = self.csv_service.export_attendance()
                messagebox.showinfo("‚úÖ –£—Å–ø–µ—Ö", f"–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤:\n{filepath}")
            elif export_type == "payments":
                filepath = self.csv_service.export_payments()
                messagebox.showinfo("‚úÖ –£—Å–ø–µ—Ö", f"–ü–ª–∞—Ç–µ–∂–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:\n{filepath}")
            elif export_type == "summary":
                filepath = self.csv_service.export_summary_report()
                messagebox.showinfo("‚úÖ –£—Å–ø–µ—Ö", f"–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤:\n{filepath}")
            
            # Refresh list
            self.refresh_export_list()
            
        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n{str(e)}")
        
        finally:
            self.dialog.config(cursor="")
    
    def refresh_export_list(self):
        """Refresh the export list"""
        try:
            # Clear existing items
            for item in self.export_tree.get_children():
                self.export_tree.delete(item)
            
            # Get exports
            exports = self.csv_service.get_export_list()
            
            # Add exports to treeview
            for export in exports:
                formatted_created = export['created'].strftime("%d.%m.%Y %H:%M")
                formatted_modified = export['modified'].strftime("%d.%m.%Y %H:%M")
                formatted_size = self.csv_service.format_size(export['size'])
                
                self.export_tree.insert("", tk.END, values=(
                    export['filename'], 
                    formatted_size, 
                    formatted_created, 
                    formatted_modified
                ))
            
        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤:\n{str(e)}")
    
    def open_export_folder(self):
        """Open export folder in file manager"""
        try:
            if os.name == 'nt':  # Windows
                os.startfile(self.csv_service.export_dir)
            elif os.name == 'posix':  # macOS and Linux
                os.system(f'open "{self.csv_service.export_dir}"')
        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É:\n{str(e)}")
    
    def delete_export_file(self):
        """Delete selected export file"""
        selection = self.export_tree.selection()
        if not selection:
            messagebox.showwarning("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        item = self.export_tree.item(selection[0])
        filename = item['values'][0]
        
        result = messagebox.askyesno(
            "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
            f"–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {filename}?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
        )
        
        if not result:
            return
        
        try:
            filepath = os.path.join(self.csv_service.export_dir, filename)
            os.remove(filepath)
            messagebox.showinfo("‚úÖ –£—Å–ø–µ—Ö", "–§–∞–π–ª —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            self.refresh_export_list()
        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:\n{str(e)}")
    
    def validate_import(self):
        """Validate import format"""
        try:
            # Show progress
            self.dialog.config(cursor="wait")
            self.dialog.update()
            
            data_type = self.import_type_var.get()
            
            if self.import_method_var.get() == "file":
                # Validate local file
                file_path = self.file_path_var.get().strip()
                if not file_path:
                    messagebox.showwarning("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª")
                    return
                
                validation = self.google_service.validate_csv_file(file_path, data_type)
            else:
                # Validate URL
                url = self.url_entry.get().strip()
                if not url:
                    messagebox.showwarning("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ URL —Ñ–∞–π–ª–∞")
                    return
                
                validation = self.google_service.validate_csv_format(url, data_type)
            
            if validation['valid']:
                encoding_info = f"\n–ö–æ–¥–∏—Ä–æ–≤–∫–∞: {validation.get('encoding', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}" if 'encoding' in validation else ""
                messagebox.showinfo(
                    "‚úÖ –§–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω", 
                    f"–§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –∏–º–ø–æ—Ä—Ç—É!\n\n"
                    f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {', '.join(validation['headers'])}\n"
                    f"–°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {validation['row_count']}{encoding_info}"
                )
            else:
                messagebox.showerror(
                    "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞", 
                    f"–§–∞–π–ª –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞:\n\n{validation['error']}"
                )
        
        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞:\n{str(e)}")
        
        finally:
            self.dialog.config(cursor="")
    
    def import_data(self):
        """Import data from file or URL"""
        try:
            # Show progress
            self.dialog.config(cursor="wait")
            self.dialog.update()
            
            data_type = self.import_type_var.get()
            
            if self.import_method_var.get() == "file":
                # Import from local file
                file_path = self.file_path_var.get().strip()
                if not file_path:
                    messagebox.showwarning("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª")
                    return
                
                result = self.google_service.import_from_csv_file(file_path, data_type)
            else:
                # Import from URL
                url = self.url_entry.get().strip()
                if not url:
                    messagebox.showwarning("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ URL —Ñ–∞–π–ª–∞")
                    return
                
                result = self.google_service.import_from_csv_url(url, data_type)
            
            if result['success']:
                message = f"–î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n\n"
                message += f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result['imported_count']}\n"
                if 'updated_count' in result and result['updated_count'] > 0:
                    message += f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result['updated_count']}\n"
                message += f"–û—à–∏–±–æ–∫: {len(result['errors'])}"
                
                messagebox.showinfo("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω", message)
            else:
                error_text = f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result['imported_count']}\n"
                error_text += f"–û—à–∏–±–æ–∫: {len(result['errors'])}\n\n"
                error_text += "–û—à–∏–±–∫–∏:\n" + "\n".join(result['errors'][:5])
                if len(result['errors']) > 5:
                    error_text += f"\n... –∏ –µ—â–µ {len(result['errors']) - 5} –æ—à–∏–±–æ–∫"
                
                messagebox.showwarning("‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç —Å –æ—à–∏–±–∫–∞–º–∏", error_text)
        
        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:\n{str(e)}")
        
        finally:
            self.dialog.config(cursor="")
    
    def toggle_import_method(self):
        """Toggle between file and URL import methods"""
        if self.import_method_var.get() == "file":
            self.file_frame.pack(fill=tk.X, pady=(0, 20))
            self.url_frame.pack_forget()
        else:
            self.file_frame.pack_forget()
            self.url_frame.pack(fill=tk.X, pady=(0, 20))
    
    def select_csv_file(self):
        """Select CSV file for import"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª",
            filetypes=[
                ("CSV files", "*.csv"),
                ("All files", "*.*")
            ]
        )
        if file_path:
            self.file_path_var.set(file_path)


def show_export_import_dialog(parent):
    """Show export/import dialog"""
    ExportImportDialog(parent)
